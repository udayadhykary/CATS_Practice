facet_wrap(Pclass)
ggplot(titanic, aes(x = Sex, fill = Survived))+
theme_classic() +
facet_wrap(~ Pclass)+
geom_bar() +
labs(y = "Passenger Count", title = "Titanic Survival Rates by Pclass and Sex")
ggplot(titanic, aes(x = Sex, fill = Survived))+
theme_classic() +
facet_wrap( Pclass)+
geom_bar() +
labs(y = "Passenger Count", title = "Titanic Survival Rates by Pclass and Sex")
ggplot(titanic, aes(x = Sex, fill = Survived))+
theme_classic() +
facet_wrap(Pclass)+
geom_bar() +
labs(y = "Passenger Count", title = "Titanic Survival Rates by Pclass and Sex")
ggplot(titanic, aes(x = Sex, fill = Survived))+
theme_classic() +
facet_wrap(~ Pclass)+
geom_bar() +
labs(y = "Passenger Count", title = "Titanic Survival Rates by Pclass and Sex")
ggplot(titanic, aes(x = Age)) +
theme_classic() +
geom_histogram(binwidth = 5) +
labs(y = "Passenger Count",
x = "Age (binwidth = 5)",
title = "Titanic Dataset Age Distribtion")
ggplot(titanic, aes(x = Age, fill = Survived)) +
theme_classic() +
geom_histogram(binwidth = 5) +
labs(y = "Passenger Count",
x = "Age (binwidth = 5)",
title = "Survival Rates by Age")
ggplot(titanic, aes(x = Survived, y = Age)) +
theme_classic() +
geom_boxplot() +
labs(y = "Age",
x = "Survived",
title = "Titanic Survival Rates by Age")
ggplot(titanic, aes(x = Survived, y = Age)) +
theme_classic() +
geom_boxplot() +
labs(y = "Age",
x = "Survived",
title = "Survival Rates by Age; plotted using boxplot")
ggplot(titanic, aes(x = Age, fill = Survived)) +
theme_classic() +
facet_wrap(Sex ~ Pclass) +
geom_density(alpha = 0.5) +
labs(y = "Age",
x = "Survived",
title = "Survival Rates by Age, Pclass and Sex")
ggplot(titanic, aes(x = Age, fill = Survived)) +
theme_classic() +
facet_wrap(Sex ~ Pclass) +
geom_histogram(binwidth = 5) +
labs(y = "Age",
x = "Survived",
title = "Titanic Survival Rates by Age, Pclass and Sex")
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/download/download_file.R')
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/download/download_file.R')
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/download/download_file.R')
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/download/download_file.R')
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/download/download_file.R')
ui <- fluidPage(
titlePanel("Practicing RenderUI in R Shiny"),
sidebarLayout(
sidebarPanel(
selectInput("data", "Select the dataset you want to plot", choices = c("iris", "mtcars", "trees"))
),
mainPanel()
)
)
runApp('C:/Users/udaya/OneDrive/Desktop/renderUI.R')
runApp('C:/Users/udaya/OneDrive/Desktop/renderUI.R')
runApp('C:/Users/udaya/OneDrive/Desktop/renderUI.R')
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/fileInput.R')
runApp('C:/Users/udaya/OneDrive/Desktop/gem/fileInput.R')
runApp('C:/Users/udaya/OneDrive/Desktop/gem/fileInput.R')
runApp('C:/Users/udaya/OneDrive/Desktop/gem/fileInput.R')
runApp('C:/Users/udaya/OneDrive/Desktop/gem/fileInput.R')
runApp('C:/Users/udaya/OneDrive/Desktop/gem/fileInput.R')
runApp('C:/Users/udaya/OneDrive/Desktop/gem/fileInput.R')
runApp('C:/Users/udaya/OneDrive/Desktop/gem/fileInput.R')
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/image_video/image_video.R')
runApp('C:/Users/udaya/OneDrive/Desktop/image_video/image_video.R')
runApp('C:/Users/udaya/OneDrive/Desktop/image_video/image_video.R')
runApp('C:/Users/udaya/OneDrive/Desktop/image_video/image_video.R')
runApp('C:/Users/udaya/OneDrive/Desktop/image_video/image_video.R')
install.packages("rhansontable")
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/rhandsontable/rhandsontable.R')
runApp('C:/Users/udaya/OneDrive/Desktop/rhandsontable/rhandsontable.R')
runApp('C:/Users/udaya/OneDrive/Desktop/rhandsontable/rhandsontable.R')
install.packages("shinydashboard")
library(shiny)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Practicing shinydashboard package", titleWidth = 500),
dashboardSidebar("This is a sidebar"),
dashboardBody("This is the body of the dashbaord")
)
runApp('C:/Users/udaya/OneDrive/Desktop/shinydashboard/shinydashboard.R')
library(shiny)
library(shinydashboard)
library(plotly)
library(datasets)
runApp('C:/Users/udaya/OneDrive/Desktop/tabBox/tabBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/tabBox/tabBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/tabBox/tabBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/tabBox/tabBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/tabBox/tabBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/tabBox/tabBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/shinydashboard/tabBox.R')
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/shinydashboard/infoBox.R')
ui <- dashboardPage(
dashboardHeader(title = "Creating and Rendering infoBox", titleWidth = 700),
dashboardSidebar(
sidebarMenu(
menuItem("infoBox", tabName = "infobox")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "infobox",
fluidRow(infoBoxOutput("min_", width = 3),
infoBoxOutput("max_", width = 3),
infoBoxOutput("sd_", width = 3),
infoBoxOutput("mean_", width = 3))),
fluidRow(infoBoxOutput("min_", width = 6))
)
)
)
server <- function(input, output, session) {
output$min_ <- renderInfoBox({
infoBox(title = "Minm",
value = min,
subtitle = "minimum value in dataset",
fill = TRUE)
})
output$max_ <- renderInfoBox({
infoBox(title = "Maxm",
value = max,
subtitle = "maximum value in dataset", fill = TRUE,
color = "yellow")
})
output$sd_ <- renderInfoBox({
infoBox(title = "SD",
value = round(sd, 2),
subtitle = "Standard Deviation", icon("arrow-up"))
})
output$mean_ <- renderInfoBox({
infoBox(title = "Mean",
value = mean,
subtitle = "Mean of dataset values",
icon = icon("angle-double-right"))
})
output$median_ <- renderInfoBox({
infoBox(title = tags$b("Median"),
value = median,
subtitle = tags$i("Median of dataset"),
icon = icon("angle-double-right"))
})
}
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/shinydashboard/infoBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/shinydashboard/infoBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dd.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dd.R')
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/shinydashboard/infoBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/shinydashboard/infoBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/shinydashboard/infoBox.R')
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/shinydashboard/infoBox.R')
library(shiny)
library(shinyd)
library(shinydashboard)
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
ui <- dashboardPage(
dashboardHeader(title = "Let's see what I can build in R Shinydashboard"),
dashboardSidebar(),
dashboardBody()
)
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
?icon
icon
?iconvlist
ui <- dashboardPage(
dashboardHeader(title = "Let's see what I can build in R Shinydashboard", titleWidth = 450),
dashboardSidebar(
sidebarMenu(
sliderInput("bins","Enter the no. of bins: ", min = 1, max = 100, value = 50),
menuItem("Dashboard", tabName = "dash", icon = icon("dashboard")),
menuSubItem("Dashboard Finance", tabName = "fin", icon = icon("creditcard")),
menuSubItem("Dashboard Sales", tabName = "sal"),
menuItem("Detailed Analysis"),
menuItem("Raw Data")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dash",
fluidRow(
box(plotOutput("histo"))
)),
tabItem(tabName = "fin",
h1("This is the finance dashboard")),
tabItem(tabName = "sal",
h1("This is the sales dashboard"))
)
)
)
?iconvlist
?iconlist
?icon
??iconlist
??iconlist
"??iconlist"
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dashboard/start.R')
library(plotly)
a <- aggregate(mpg ~ cyl+hp, data=mtcars, mean)
a
View(mtcars)
library(shiny)
library(shinydashboard)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output, session){
}
shinyApp(ui = ui, server = server)
install.packages"RMySQL"
install.packages("RMySQL")
library(RMySQL)
connection <- dbConnect(RMySQL::MySQL(),
dbname = "college",
host = "localhost",
port = 3306,
user = "root",
password = "masharostova1@")
dbListTables(connection)
library(DBI)
std <- dbGetQuery(connection, "SELECT * FROM student LIMIT 5")
std
glimpse(std)
library(dplyr)
glimpse(std)
std <- dbGetQuery(connection, "SELECT * FROM student LIMIT 3")
s
std
glimpse(std)
dbDisconnect(connection)
dbDisconnect(connection)
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/accident/onthis.R')
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Analyzing US Accidents Data", titleWidth = 300),
dashboardSidebar(
sidebarMenu(id = "sidebarmenu",
menuItem(text = "Barplot of Severity", tabName = "bar_plot", icon = icon("clipboard"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "bar_plot", p("This demonstrates the relative frequencies of severity"),
plotOutput(plot1))
)
)
)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Analyzing US Accidents Data", titleWidth = 300),
dashboardSidebar(
sidebarMenu(id = "sidebarmenu",
menuItem(text = "Barplot of Severity", tabName = "bar_plot", icon = icon("clipboard"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "bar_plot", p("This demonstrates the relative frequencies of severity"),
plotOutput(plot1))
)
)
)
output$plot1 <- renderPlot({
barplot(rf, names.arg = 1:4, main = "Relative Frequencies of Severity")
})
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Analyzing US Accidents Data", titleWidth = 300),
dashboardSidebar(
sidebarMenu(id = "sidebarmenu",
menuItem(text = "Barplot of Severity", tabName = "bar_plot", icon = icon("clipboard"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "bar_plot", p("This demonstrates the relative frequencies of severity"),
plotOutput(plot1))
)
)
)
server <- function(input, output, session){
setwd("C:\\Users\\udaya\\OneDrive\\Desktop\\accident")
accidents <- read_csv("US_Accidents_March23.csv")
accidents <- accidents %>% filter(Start_Time <= '2020-12-31')
accidents <- accidents %>% filter(Start_Time >= '2020-01-01')
accidents$Severity <- as.integer(accidents$Severity)
count_severity <- c(sum(accidents$Severity==1),
sum(accidents$Severity==2),
sum(accidents$Severity==3),
sum(accidents$Severity==4)
)
rf <- count_severity/sum(count_severity)
output$plot1 <- renderPlot({
barplot(rf, names.arg = 1:4, main = "Relative Frequencies of Severity")
})
}
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Analyzing US Accidents Data", titleWidth = 300),
dashboardSidebar(
sidebarMenu(id = "sidebarmenu",
menuItem(text = "Barplot of Severity", tabName = "bar_plot", icon = icon("clipboard"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "bar_plot", p("This demonstrates the relative frequencies of severity"),
plotOutput(plot1))
)
)
)
runApp('C:/Users/udaya/OneDrive/Desktop/accident/onthis.R')
accidents <- read_csv("US_Accidents_March23.csv")
library(RMySQL)
library(DBI)
library(dply)
library(RMySQL)
library(DBI)
library(dplyr)
connect <- dbConnect(RMySQL::MySQL(),
dbname = "olympics",
host = "localhost",
port = 3306,
user = "root",
password = "masharostova1@")
dbListTables(connect)
std <- dbGetQuery(connect, "SELECT * FROM athlete_events LIMIT 3")
std
glimpse(std)
# How many olympics games have been held?
total_games <- dbGetQuery(connect, "SELECT COUNT(DISTINCT games) AS total_olympic_games FROM athlete_events")
total_games
# List down all Olympics games held so far.
total_olympic_games <- dbGetQuery(connect, "SELECT DISTINCT oly.year,oly.season,oly.city FROM athlete_events oly ORDER by year")
total_olympic_games
dbDisconnect(connection)
# List down all Olympics games held so far.
total_olympic_games <- dbGetQuery(connect, "SELECT DISTINCT oly.year,oly.season,oly.city FROM athlete_events oly ORDER by year")
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/accident/new_data.R')
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/accidents/Dashboard.R')
data("AirPassengers")
print(head(AirPassengers))
View(AirPassengers)
str(AirPassengers)
plot(AirPassengers)
decomposed <- decompose(AirPassengers)
decomposed
plot(decomposed)
install.packages("forecast")
library(forecast)
forecast_data <- forecast(AirPassengers, h =24)
plot(forecast_data)
data("Airpassengers")
#learning time series analsis with r studio
libarary(data)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(forecast)
data("Airpassengers")
library(datasets)
data("Airpassengers")
data("AirPassengers")
View(head(AirPassengers))
str(AirPassengers)
plot(AirPassengers)
decomposed <- decompose(AirPassengers)
plot(decomposed)
forecast_data <- forecast(AirPassengers, h = 24)
plot(forecast_data)
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/accidents/Dashboard.R')
runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/accidents/Dashboard.R')
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/practice/CATS_Practice/udaya/accidents/Dashboard.R')
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/tsr.R')
runApp('C:/Users/udaya/OneDrive/Desktop/tsr.R')
runApp('C:/Users/udaya/OneDrive/Desktop/tsr.R')
library(shiny); runApp('C:/Users/udaya/OneDrive/Desktop/viz/tsr.R')
runApp('C:/Users/udaya/OneDrive/Desktop/viz/tsr.R')
runApp('C:/Users/udaya/OneDrive/Desktop/viz/tsr.R')
runApp('C:/Users/udaya/OneDrive/Desktop/viz/tsr.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dddd.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dddd.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dddd.R')
devtools::install_github("ropensci/rnaturalearthhires
devtools::install_github("ropensci/rnaturalearthhires
devtools::install_github("ropensci/rnaturalearthhires
runApp('C:/Users/udaya/OneDrive/Desktop/dddd.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dddd.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dddd.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dddd.R')
runApp('C:/Users/udaya/OneDrive/Desktop/dddd.R')
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(shinydashboard)
library(maps)
library(mapdata)
library(leaflet)
mmm
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shiny)
library(shinydashboard)
library(maps)
library(mapdata)
library(leaflet)
setwd("C:\\Users\\udaya\\OneDrive\\Desktop\\viz")
aadt <- read_csv("tsr.csv")
non_na_rows <- aadt[!is.na(aadt$`AADT by Sub-Corridor`), ]
non_na_rows
aadt_corr <- non_na_rows[, c("Corridor Name", "AADT by Whole Corridor")]
aadt_corr
merged <- read_csv("Merged.csv")
mtti_am <- merged[, c("RoadName", "Mean travel time index (AM)")]
mtti_am
runApp('tsr.R')
runApp('tsr.R')
runApp('tsr.R')
runApp('tsr.R')
runApp('tsr.R')
runApp('tsr.R')
runApp('tsr.R')
runApp('tsr.R')
runApp('tsr.R')
runApp('tsr.R')
runApp('tsr.R')
runApp('dashboard.R')
setwd("C:\\Users\\udaya\\OneDrive\\Desktop\\viz")
aadt <- read_csv("aadt.csv")
View(aadt)
runApp('dashboard.R')
library(shiny); runApp('dashboard.R')
